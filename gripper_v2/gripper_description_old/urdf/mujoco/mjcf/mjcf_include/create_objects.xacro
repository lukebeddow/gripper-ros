<mujoco xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- 1. Extract dionary of settings -->
  <xacro:property name="yamlpath" value="/home/luke/gripper_repo_ws/src/gripper_v2/gripper_description/urdf/mujoco/mjcf/mjcf_include"/>
  <xacro:property name="yamlname" value="define_objects.yaml"/>
  <xacro:property name="mydict" value="${xacro.load_yaml(yamlpath + '/' + yamlname)}"/>

  <!-- 2. Key base macros which build up the xml code snippets -->

  <!-- macro to create a simple object-->
  <xacro:macro name="create_object" params="name i mass diaginertia quat">
    <body name="${name}" pos="0 0 0">
      <inertial pos="0 0 0" quat="${quat}" mass="${mass}" diaginertia="${diaginertia}"/>
      <freejoint name="${name}"/>
      <geom name="${name}_geom" type="mesh" mesh="${name}"/>
    </body>
  </xacro:macro>

  <!-- macro to create a scaled mesh -->
  <xacro:macro name="scaled_mesh" params="name path i x y z quat">
    <mesh name="${name}" file="${path}" 
          scale="${x} ${y} ${z}"
          refquat="${quat}"
    />
  </xacro:macro>

  <!-- macro to save object details -->
  <xacro:macro name="save_details" params="name z_rest">
    <object_details name="${name}" z_rest="${z_rest}"/>
  </xacro:macro>

  <!-- 3. Looping macros to repeatedly make xml snippets -->

  <!-- macro to create the set of scaled objects -->
  <xacro:macro name="gen_scaled_objects" params="name object xmltype">

    <!-- macro to loop -->
    <xacro:macro name="loop_objects" params="name object i xmltype">

      <!-- default scaling values -->
      <xacro:property name="xscale" value="1.0"/>
      <xacro:property name="yscale" value="1.0"/>
      <xacro:property name="zscale" value="1.0"/>
      <xacro:if value="${mydict[object]['scale']['num'] - 1}">
        <!-- override if scale_num > 1 -->
        <xacro:property name="xscale" value="${mydict[object]['scale']['max']['x'] - ((mydict[object]['scale']['max']['x'] - mydict[object]['scale']['min']['x']) / (mydict[object]['scale']['num'] - 1)) * (i - 1)}"/>
        <xacro:property name="yscale" value="${mydict[object]['scale']['max']['y'] - ((mydict[object]['scale']['max']['y'] - mydict[object]['scale']['min']['y']) / (mydict[object]['scale']['num'] - 1)) * (i - 1)}"/>
        <xacro:property name="zscale" value="${mydict[object]['scale']['max']['z'] - ((mydict[object]['scale']['max']['z'] - mydict[object]['scale']['min']['z']) / (mydict[object]['scale']['num'] - 1)) * (i - 1)}"/>
      </xacro:if>

      <!-- define the name of the object in simulation, ${name} is the .STL filename -->
      <xacro:property name="obj_name" value="${name}_${mydict[object]['suffix']}_${i}"/>

      <!-- get rotation values-->
      <xacro:property name="qx" value="${mydict[object]['quat']['x']}"/>
      <xacro:property name="qy" value="${mydict[object]['quat']['y']}"/>
      <xacro:property name="qz" value="${mydict[object]['quat']['z']}"/>
      <xacro:property name="qw" value="${mydict[object]['quat']['w']}"/>

      <!-- get inertial properties -->
      <xacro:property name="mass" value="${mydict[object]['inertial']['mass'] * xscale * yscale * zscale}"/>
      <xacro:if value="${mydict[object]['inertial']['type'] == 'cuboid'}">
        <xacro:property name="ixx" value="${(1./12.) * mass * ((mydict[object]['inertial']['y']*yscale)**2 + (mydict[object]['inertial']['z']*zscale)**2)}"/>
        <xacro:property name="iyy" value="${(1./12.) * mass * ((mydict[object]['inertial']['x']*xscale)**2 + (mydict[object]['inertial']['z']*zscale)**2)}"/>
        <xacro:property name="izz" value="${(1./12.) * mass * ((mydict[object]['inertial']['x']*xscale)**2 + (mydict[object]['inertial']['y']*yscale)**2)}"/>
      </xacro:if>
      <xacro:if value="${mydict[object]['inertial']['type'] == 'sphere'}">
        <xacro:property name="ixx" value="${(2./5.) * mass * (mydict[object]['inertial']['r']*xscale)**2}"/>
        <xacro:property name="iyy" value="${(2./5.) * mass * (mydict[object]['inertial']['r']*yscale)**2}"/>
        <xacro:property name="izz" value="${(2./5.) * mass * (mydict[object]['inertial']['r']*zscale)**2}"/>
      </xacro:if>
      <xacro:if value="${mydict[object]['inertial']['type'] == 'cylinder'}">
        <xacro:property name="izz" value="${(1./2.) * mass * (mydict[object]['inertial']['r'] * ((yscale + xscale) / 2.))**2}"/>
        <xacro:property name="iyy" value="${(1./4.) * mass * (mydict[object]['inertial']['r'] * ((yscale + xscale) / 2.))**2 + (1./12.) * mass * (mydict[object]['inertial']['h']*zscale)}"/>
        <xacro:property name="ixx" value="${(1./4.) * mass * (mydict[object]['inertial']['r'] * ((yscale + xscale) / 2.))**2 + (1./12.) * mass * (mydict[object]['inertial']['h']*zscale)}"/>
      </xacro:if>

      <!-- get z rest -->
      <xacro:if value="${mydict[object]['spawn']['axis'] == 'x'}">
        <xacro:property name="z_rest_scale" value="${xscale}"/>
      </xacro:if>
      <xacro:if value="${mydict[object]['spawn']['axis'] == 'y'}">
        <xacro:property name="z_rest_scale" value="${yscale}"/>
      </xacro:if>
      <xacro:if value="${mydict[object]['spawn']['axis'] == 'z'}">
        <xacro:property name="z_rest_scale" value="${zscale}"/>
      </xacro:if>
      <xacro:property name="z_rest" value="${z_rest_scale * mydict[object]['spawn']['rest']}"/>

      <!-- what type of xml: object or mesh -->
      <xacro:if value="${xmltype=='mesh'}">
        <!-- generate the mesh (note quaternion conjugate used, see mujoco docs) -->
        <xacro:scaled_mesh
          name="${obj_name}"
          path="models/${mydict[object]['path']}/${name}.STL" 
          i="${i}"
          x="${xscale}"
          y="${yscale}"
          z="${zscale}"
          quat="${qw} ${-qx} ${-qy} ${-qz}"
        />
      </xacro:if>
      <xacro:if value="${xmltype=='object'}">
        <!-- generate the object-->
        <xacro:create_object
          name="${obj_name}"
          i="${i}"
          mass="${mass}"
          diaginertia="${ixx} ${iyy} ${izz}"
          quat="${qw} ${qx} ${qy} ${qz}"
        />
      </xacro:if>
      <xacro:if value="${xmltype=='details'}">
        <!-- save object details -->
        <xacro:save_details 
          name="${obj_name}" 
          z_rest="${z_rest}"
        />
      </xacro:if>

      <!-- recursively call this same macro, with i reduced by one -->
      <xacro:if value="${i - 1}">
        <xacro:loop_objects name="${name}" object="${object}" i="${i - 1}"
          xmltype="${xmltype}"/>
      </xacro:if>
    </xacro:macro>

    <!-- execute the loop macro and create the meshes -->
    <xacro:loop_objects name="${name}" object="${object}" xmltype="${xmltype}"
      i="${mydict[object]['scale']['num']}"/>

  </xacro:macro>

  <!-- macro to create the bodies for each fillet in a loop -->
  <xacro:macro name="create_objects" params="object xmltype">

    <!-- looping macro -->
    <xacro:macro name="loop_create" params="object i xmltype">

      <!-- determine parameters -->
      <xacro:if value="${mydict[object]['fillet']['used']}">
        <!-- with fillet used -->
        <xacro:property name="obj_name_root"
          value="${mydict[object]['name_root']}_${i * mydict[object]['fillet']['step'] + mydict[object]['fillet']['min']}"/>
      </xacro:if>
      <xacro:if value="${(mydict[object]['fillet']['used'] - 1) * -1}">
        <!-- without fillet used -->
        <xacro:property name="obj_name_root" value="${mydict[object]['name_root']}"/>
      </xacro:if>

      <!-- create the scaled meshes -->
      <xacro:gen_scaled_objects 
        name="${obj_name_root}" 
        object="${object}" 
        xmltype="${xmltype}"
      />
      <!-- if we will keep looping -->
      <xacro:if value="${mydict[object]['fillet']['used']}">
        <xacro:if value="${i - int(mydict[object]['fillet']['min'] / mydict[object]['fillet']['step'])}">
          <xacro:loop_create object="${object}" i="${i - 1}" xmltype="${xmltype}"/>
        </xacro:if>
      </xacro:if>
    </xacro:macro>

    <!-- enter the loop -->
    <xacro:if value="${mydict[object]['include']}">
      <xacro:if value="${mydict[object]['fillet']['used']}">
        <!-- with fillet used -->
        <xacro:loop_create object="${object}" xmltype="${xmltype}"
          i="${int(mydict[object]['fillet']['max'] / mydict[object]['fillet']['step'])}"/>
      </xacro:if>
      <xacro:if value="${(mydict[object]['fillet']['used'] - 1) * -1}">
        <!-- without fillet used -->
        <xacro:loop_create object="${object}" xmltype="${xmltype}" i="1"/>
      </xacro:if>
    </xacro:if>

  </xacro:macro>

  <!-- 4. Main macro, create code for all objects in yaml file -->

  <xacro:macro name="create_all" params="type">

    <!-- macro to loop over all theh objects in yaml, and run create_objects -->
    <xacro:property name="key_num" value="${len(mydict.keys())}"/>
    <xacro:macro name="loop_keys" params="type i">
      <xacro:property name="object" value="${list(mydict.keys())[i - 1]}"/>
      <xacro:create_objects object="${object}" xmltype="${type}"/>
      <xacro:if value="${i - 1}">
        <xacro:loop_keys type="${type}" i="${i - 1}"/>
      </xacro:if>
    </xacro:macro>
    <xacro:loop_keys type="${type}" i="${key_num}"/>

  </xacro:macro>

</mujoco>
